<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://josecastillolema.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://josecastillolema.github.io/" rel="alternate" type="text/html" /><updated>2025-07-27T04:39:32-05:00</updated><id>https://josecastillolema.github.io/feed.xml</id><title type="html">GitOps</title><subtitle>Networks, SDN, NFVi, OpenStack, K8s/OpenShift.</subtitle><author><name>Jose Castillo Lema</name></author><entry><title type="html">CODECO 11th Plenary Meeting &amp;amp; IETF 123 hackaton</title><link href="https://josecastillolema.github.io/codeco-plenary11/" rel="alternate" type="text/html" title="CODECO 11th Plenary Meeting &amp;amp; IETF 123 hackaton" /><published>2025-07-16T00:00:00-05:00</published><updated>2025-07-16T00:00:00-05:00</updated><id>https://josecastillolema.github.io/codeco-plenary11</id><content type="html" xml:base="https://josecastillolema.github.io/codeco-plenary11/"><![CDATA[<p><img src="/assets/images/posts/2025-07-16-codeco-plenary11/1.jpg" alt="" /></p>

<h2 id="codeco-11th-plenary-meeting">CODECO 11th Plenary Meeting</h2>

<p>The <a href="https://he-codeco.eu/">CODECO project</a>, held its 11th Plenary Meeting on July 16th ‚Äì 18th, 2025, at Telefonica District premises in Madrid, Spain.</p>

<p>CODECO is shaping the future of edge-cloud infrastructure operations and management. It has already developed a novel working approach for intelligent management of workflows and resources in the edge-cloud continuum supporting different profiles of applications e.g., data-intense, real-time, green etc. It also gives tools for developers to leveraging advanced edge-cloud resource management capabilities on top of Kubernetes, Kubeflow, Edgenet and other frameworks.</p>

<p>One of the most enjoyable aspects of this project, is that meetings are practical, hands-on, to the point and results focused. As the project is in its last year, there are many things developed and many things happening every month.</p>

<p><img src="/assets/images/posts/2025-07-16-codeco-plenary11/2.jpg" alt="" />
<img src="/assets/images/posts/2025-07-16-codeco-plenary11/3.jpg" alt="" /></p>

<h2 id="ietf-123-hackaton">IETF 123 hackaton</h2>

<p><img src="/assets/images/posts/2025-07-16-codeco-plenary11/4.jpg" alt="" /></p>

<p>The Internet Engineering Task Force (IETF) is holding a <a href="https://wiki.ietf.org/en/meeting/123/hackathon">hackathon</a> to encourage developers and subject matter experts to discuss, collaborate, and develop utilities, ideas, sample code, and solutions that show practical implementations of IETF standards.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>üóì When: 19 - 20 July 2025 (Saturday - Sunday)
üá™üá∏ Where: Meli√° Castilla
</code></pre></div></div>

<p>This is your chance to shine, showcase your skills, and <strong>compete for a ‚Ç¨2800 reward</strong> by securing a spot in the top 3 of each challenge. üèÜüí∞</p>

<h3 id="codeco-challenges">CODECO challenges</h3>

<ul>
  <li>
    <p><strong>Challenge 1: Green network observability and reporting</strong></p>

    <p>This challenge explores energy-awareness observability and reporting that may suit telco-cloud resource management. The challenge relies on approaches and code under development in the context of the Horizon Europe project CODECO, and also relates with a new informational draft being proposed to <a href="https://datatracker.ietf.org/doc/bofreq-palmero-getting-ready-for-energy-efficient-networking-green/">IETF GREEN</a>.</p>

    <p>The main goal of this challenge is to consider enhancements to CODECO (as a relevant example of an edge-cloud orchestrator that provides a data-compute-network approach) in terms of monitoring and exporting metrics aligned with GREEN principles e.g., CO2 network footprinting, green workload percentage.</p>

    <p>The reporting will be provided to Prometheus and eventually to SDN; alignment to YANG will be considered.</p>
  </li>
  <li>
    <p><strong>Challenge 2: Joint exposure of compute and network metrics for path selection</strong></p>

    <p>This enhancement to the CODECO framework introduces <a href="https://datatracker.ietf.org/wg/cats/about/">Computing-Aware Traffic Steering (CATS)</a>-aligned path selection capabilities by leveraging CODECO‚Äôs existing compute and network observability. The goal is to support computing-aware traffic steering across the Edge-Cloud continuum, in line with the architectural direction of IETF CATS.</p>

    <p>CODECO collects real-time infrastructure metrics -such as CPU , memory usage, latency, and network congestion‚Äî from its ACM and NetMA components and aggregates them via the PDLC-CA module into node and cluster scores. These scores are then used to inform microservice placement and potential workload redirection decisions, consistent with CATS principles.</p>

    <p>The aim is to adapt the current approach to provide scores from PDLC and PDLC-CA to NetMA which may assist in Path ranking and selection based on dynamic network latency and congestion data.</p>

    <p>This design supports the CATS use case of service instance selection and path steering based on combined compute and network metrics, helping optimize service experience in distributed, heterogeneous edge environments.</p>

    <p>Setup instructions <a href="https://gitlab.eclipse.org/eclipse-research-labs/codeco-project/hackathon/challenge-2/codeco-cats/-/blob/main/Installing_the_CODECO_VM__Extracting_Metrics__and_Building_a_Three-Level_Metrics_Management_.pdf">here</a>.</p>
  </li>
</ul>

<p><img src="/assets/images/posts/2025-07-16-codeco-plenary11/5.jpg" alt="" /></p>]]></content><author><name>Jose Castillo Lema</name></author><category term="en" /><category term="networks" /><category term="redhat" /><category term="research" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">DevConf.CZ 2025</title><link href="https://josecastillolema.github.io/devconf25/" rel="alternate" type="text/html" title="DevConf.CZ 2025" /><published>2025-05-23T00:00:00-05:00</published><updated>2025-05-23T00:00:00-05:00</updated><id>https://josecastillolema.github.io/devconf25</id><content type="html" xml:base="https://josecastillolema.github.io/devconf25/"><![CDATA[<p><a href="https://www.devconf.info/cz/"><img src="/assets/images/posts/2025-05-23-devconf25/1.jpg" alt="" /></a></p>

<h2 id="sessions">Sessions</h2>

<p>I will be speaking at <a href="https://www.devconf.info/cz/">DevConf.CZ 2025</a> in Brno on June 12-14. DevConf.CZ is an annual, free, Red Hat-sponsored technology conference for users, operators, administrators, and contributors to Free and Open Source technologies. Explore the latest in AI, Security, DevEx, Platform Engineering with industry leaders.</p>

<p>Here are my sessions:</p>

<ul>
  <li>üîß <a href="https://pretalx.devconf.info/devconf-cz-2025/talk/NLWP8Z/">Shifting performance engineering left</a> - with Raul Sevilla</li>
  <li>üß† <a href="https://pretalx.devconf.info/devconf-cz-2025/talk/N9CLR3/">CODECO: AI-Driven Orchestration for Multi-Cluster Edge Deployment</a> - with Dean Kelly and Alka Nixon</li>
</ul>

<p>More information can be found in this Red Hat Research <a href="https://research.redhat.com/blog/2025/06/04/find-ai-edge-research-infrastructure-cryptography-and-more-at-research-related-devconf-cz-talks/">blog post</a>.</p>

<h2 id="pics">Pics</h2>

<p><img src="/assets/images/posts/2025-05-23-devconf25/2.jpg" alt="" />
<img src="/assets/images/posts/2025-05-23-devconf25/3.jpg" alt="" />
<img src="/assets/images/posts/2025-05-23-devconf25/4.jpg" alt="" /></p>

<h2 id="slides">Slides</h2>

<iframe src="https://docs.google.com/gview?url=https://raw.githubusercontent.com/josecastillolema/talks/main/2025-devconf.cz/shift-left.pdf&amp;embedded=true" style="width:100%; height: unset; aspect-ratio: 1/1;" frameborder="0"></iframe>

<iframe src="https://docs.google.com/gview?url=https://raw.githubusercontent.com/josecastillolema/talks/main/2025-devconf.cz/codeco.pdf&amp;embedded=true" style="width:100%; height: unset; aspect-ratio: 1/1;" frameborder="0"></iframe>

<h2 id="recordings">Recordings</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/fb-DlHSQZ5g" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p><img src="https://img.shields.io/youtube/views/fb-DlHSQZ5g?style=social" alt="YouTube Video Views" />
<img src="https://img.shields.io/youtube/likes/fb-DlHSQZ5g?style=social" alt="YouTube Video Likes" /></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/01-S0iiGd5Y" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p><img src="https://img.shields.io/youtube/views/01-S0iiGd5Y?style=social" alt="YouTube Video Views" />
<img src="https://img.shields.io/youtube/likes/01-S0iiGd5Y?style=social" alt="YouTube Video Likes" /></p>]]></content><author><name>Jose Castillo Lema</name></author><category term="en" /><category term="events" /><category term="openshift" /><category term="redhat" /><category term="research" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ICPE 2025</title><link href="https://josecastillolema.github.io/icpe25/" rel="alternate" type="text/html" title="ICPE 2025" /><published>2025-05-07T00:00:00-05:00</published><updated>2025-05-07T00:00:00-05:00</updated><id>https://josecastillolema.github.io/icpe25</id><content type="html" xml:base="https://josecastillolema.github.io/icpe25/"><![CDATA[<p><strong>ICPE ‚Äò25: Proceedings of the 16th ACM/SPEC International Conference on Performance Engineering</strong></p>

<p><a href="https://icpe2025.spec.org"><img src="/assets/images/posts/2025-05-07-icpe25/1.png" alt="" /></a></p>

<h2 id="agenda"><a href="https://icpe2025.spec.org/program/">Agenda</a></h2>

<p><a href="https://dl.acm.org/doi/10.1145/3676151.3719352"><strong>Bridging Clusters: A Comparative Look at Multicluster Networking Performance in Kubernetes</strong></a></p>

<p><a href="https://doi.org/10.1145/3676151.3719352"><img src="https://zenodo.org/badge/DOI/10.1145/3676151.3719352.svg" alt="DOI:10.1109/NETSOFT.2019.8806686" /></a></p>

<ul>
  <li>Sai Sindhur Malleni, <em>Red Hat</em>, USA</li>
  <li>Ra√∫l Sevilla, <em>Red Hat</em>, Spain</li>
  <li>Jos√© Castillo Lema, <em>Red Hat</em>, Spain</li>
  <li>Andr√© Bauer, <em>Illinois Institute of Technology</em>, USA</li>
</ul>

<h2 id="cite-this">Cite this</h2>

<h3 id="acm-ref">ACM Ref</h3>
<p>Sai Sindhur Malleni, Ra√∫l Sevilla, Jos√© Castillo Lema, and Andr√© Bauer. 2025. Bridging Clusters: A Comparative Look at Multi-Cluster Networking Performance in Kubernetes. In Proceedings of the 16th ACM/SPEC International Conference on Performance Engineering (ICPE ‚Äò25). Association for Computing Machinery, New York, NY, USA, 113‚Äì123. https://doi.org/10.1145/3676151.3719352</p>

<h3 id="bibtex">BibTeX</h3>
<div class="language-bibtex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">@inproceedings</span><span class="p">{</span><span class="nl">10.1145/3676151.3719352</span><span class="p">,</span>
  <span class="na">author</span> <span class="p">=</span> <span class="s">{Malleni, Sai Sindhur and Sevilla, Ra\'{u}l and Lema, Jos\'{e} Castillo and Bauer, Andr\'{e}}</span><span class="p">,</span>
  <span class="na">title</span> <span class="p">=</span> <span class="s">{Bridging Clusters: A Comparative Look at Multi-Cluster Networking Performance in Kubernetes}</span><span class="p">,</span>
  <span class="na">year</span> <span class="p">=</span> <span class="s">{2025}</span><span class="p">,</span>
  <span class="na">isbn</span> <span class="p">=</span> <span class="s">{9798400710735}</span><span class="p">,</span>
  <span class="na">publisher</span> <span class="p">=</span> <span class="s">{Association for Computing Machinery}</span><span class="p">,</span>
  <span class="na">address</span> <span class="p">=</span> <span class="s">{New York, NY, USA}</span><span class="p">,</span>
  <span class="na">url</span> <span class="p">=</span> <span class="s">{https://doi.org/10.1145/3676151.3719352}</span><span class="p">,</span>
  <span class="na">doi</span> <span class="p">=</span> <span class="s">{10.1145/3676151.3719352}</span><span class="p">,</span>
  <span class="na">abstract</span> <span class="p">=</span> <span class="s">{Microservices and containers have transformed the way applications are developed, tested, deployed, scaled, and managed. Several container orchestration platforms, like Kubernetes, have emerged, streamlining container management at scale and providing enter¬≠prise-grade support for application modernization. Driven by application, compliance, and end-user requirements, companies opt to deploy multiple Kubernetes clusters across public and private clouds. However, deploying applications in multi-cluster environments presents distinct challenges, especially managing the communication between the microservices spread across clusters. Traditionally, custom configurations, like VPNs or firewall rules, were required to connect such complex setups of clusters spanning the public cloud and on-premise infrastructure. This industry paper presents a comprehensive analysis of network performance characteristics for three popular open-source multi-cluster networking solutions (namely, Skupper, Submariner, and Istio), addressing the challenges of microservices connectivity across clusters. We evaluate key factors such as latency, throughput, and resource utilization using established tools and benchmarks, offering valuable insights for organizations aiming to optimize the network performance of their multi-cluster deployments. Our experiments revealed that each solution involves unique trade-offs in performance and resource efficiency: Submariner offers low latency and consistency, Istio excels in throughput with moderate resource consumption, and Skupper stands out for its ease of configuration while maintaining balanced performance.}</span><span class="p">,</span>
  <span class="na">booktitle</span> <span class="p">=</span> <span class="s">{Proceedings of the 16th ACM/SPEC International Conference on Performance Engineering}</span><span class="p">,</span>
  <span class="na">pages</span> <span class="p">=</span> <span class="s">{113‚Äì123}</span><span class="p">,</span>
  <span class="na">numpages</span> <span class="p">=</span> <span class="s">{11}</span><span class="p">,</span>
  <span class="na">keywords</span> <span class="p">=</span> <span class="s">{benchmark, distributed microservices, kubernetes, multi-cluster networking, network performance}</span><span class="p">,</span>
  <span class="na">location</span> <span class="p">=</span> <span class="s">{Toronto ON, Canada}</span><span class="p">,</span>
  <span class="na">series</span> <span class="p">=</span> <span class="s">{ICPE '25}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="pics">Pics</h2>
<p><img src="/assets/images/posts/2025-05-07-icpe25/2.jpg" alt="" />
<img src="/assets/images/posts/2025-05-07-icpe25/3.jpg" alt="" />
<img src="/assets/images/posts/2025-05-07-icpe25/4.jpg" alt="" /></p>

<h2 id="slides">Slides</h2>
<iframe src="https://docs.google.com/gview?url=https://raw.githubusercontent.com/josecastillolema/talks/main/2025-icpe/slides.pdf&amp;embedded=true" style="width:100%; height: unset; aspect-ratio: 1/1;" frameborder="0"></iframe>]]></content><author><name>Jose Castillo Lema</name></author><category term="en" /><category term="events" /><category term="networks" /><category term="openshift" /><category term="papers" /><category term="redhat" /><category term="research" /><summary type="html"><![CDATA[ICPE ‚Äò25: Proceedings of the 16th ACM/SPEC International Conference on Performance Engineering]]></summary></entry><entry><title type="html">HotCloudPerf 2025</title><link href="https://josecastillolema.github.io/hotcloudperf25/" rel="alternate" type="text/html" title="HotCloudPerf 2025" /><published>2025-05-06T00:00:00-05:00</published><updated>2025-05-06T00:00:00-05:00</updated><id>https://josecastillolema.github.io/hotcloudperf25</id><content type="html" xml:base="https://josecastillolema.github.io/hotcloudperf25/"><![CDATA[<p><strong>8th Workshop on Hot Topics in Cloud Computing Performance (HotCloudPerf 2025)</strong></p>

<p><a href="https://hotcloudperf.spec.org/"><img src="/assets/images/posts/2025-05-06-hotcloudperf25/1.png" alt="" /></a></p>

<h2 id="agenda"><a href="https://hotcloudperf.spec.org/">Agenda</a></h2>

<h2 id="overview">Overview</h2>

<p>The <a href="https://hotcloudperf.spec.org/">HotCloudPerf</a> workshop proposes a meeting venue for academics and practitioners, from experts to trainees, in the field of cloud computing performance. The new understanding of cloud computing covers the full computational continuum from data centers to edge resources to IoT sensors and devices. The workshop aims to engage this community and to lead to the development of new methodological aspects for gaining a deeper understanding not only of cloud performance, but also of cloud operation and behavior, through diverse quantitative evaluation tools, including benchmarks, metrics, and workload generators. The workshop focuses on novel cloud properties such as elasticity, performance isolation, dependability, and other non-functional system properties, in addition to classical performance-related metrics such as response time, throughput, scalability, and efficiency.</p>

<h2 id="acknowledgement">Acknowledgement</h2>

<p>The HotCloudPerf workshop is technically sponsored by the <a href="https://spec.org/">Standard Performance Evaluation Corporation</a> (SPEC)‚Äôs <a href="https://research.spec.org/">Research Group</a> (RG) and is organized annually by the <a href="https://research.spec.org/working-groups/rg-cloud/">RG Cloud Group</a>. HotCloudPerf has emerged from the series of yearly meetings organized by the RG Cloud Group, since 2013. The RG Cloud Group group is taking a broad approach, relevant for both academia and industry, to cloud benchmarking, quantitative evaluation, and experimental analysis.</p>

<h2 id="panel">Panel</h2>

<h3 id="performance-modeling-for-the-computing-continuum">Performance modeling for the computing continuum</h3>

<p><strong>Moderator</strong>: Klervie Tocz√©</p>

<p><strong>Panelists</strong></p>
<ul>
  <li>Padma Apparao (Intel)</li>
  <li>Tommaso Cucinotta (Scuola Universitaria Superiore Pisa)</li>
  <li>Matthijs Jansen (Vrije Universiteit Amsterdam)</li>
  <li>Jose Castillo Lema (RedHat)</li>
</ul>

<h2 id="pics">Pics</h2>

<p><img src="/assets/images/posts/2025-05-06-hotcloudperf25/2.jpg" alt="" /></p>

<h2 id="slides">Slides</h2>

<iframe src="https://docs.google.com/gview?url=https://raw.githubusercontent.com/josecastillolema/talks/main/2025-hotcloudperf/slides.pdf&amp;embedded=true" style="width:100%; height: unset; aspect-ratio: 1/1;" frameborder="0"></iframe>]]></content><author><name>Jose Castillo Lema</name></author><category term="en" /><category term="events" /><category term="networks" /><category term="openshift" /><category term="redhat" /><category term="research" /><summary type="html"><![CDATA[8th Workshop on Hot Topics in Cloud Computing Performance (HotCloudPerf 2025)]]></summary></entry><entry><title type="html">Red Hat Summit 2025</title><link href="https://josecastillolema.github.io/rh-summit25/" rel="alternate" type="text/html" title="Red Hat Summit 2025" /><published>2025-05-04T00:00:00-05:00</published><updated>2025-05-04T00:00:00-05:00</updated><id>https://josecastillolema.github.io/rh-summit25</id><content type="html" xml:base="https://josecastillolema.github.io/rh-summit25/"><![CDATA[<p><img src="/assets/images/posts/2025-05-04-rh-summit25/1.jpg" alt="" /></p>

<h2 id="sessions">Sessions</h2>

<p>I will be speaking at <a href="https://www.redhat.com/en/summit">Red Hat Summit 2025</a> in Boston on May 19-22. Explore the latest in AI, Security, DevEx, Platform Engineering with industry leaders.</p>

<p>Here are my sessions:</p>

<ul>
  <li>üß† Horizon Europe projects working on the cloud edge continuum - with Luis Tomas Bolivar</li>
  <li>üîß Shifting performance engineering left - with Joe Talerico</li>
</ul>

<p>More information can be found in this Red Hat Research <a href="https://research.redhat.com/blog/2025/05/12/find-ai-and-far-edge-research-and-emerging-tech-at-red-hat-summit/">blog post</a>.</p>

<h2 id="registration">Registration</h2>

<p>Register <a href="https://www.redhat.com/en/summit">here</a> for Summit and <a href="https://commons.openshift.org/gatherings/summit-25-may-19/">here</a> for OpenShift Commons!</p>

<h2 id="pics">Pics</h2>

<p><img src="/assets/images/posts/2025-05-04-rh-summit25/2.jpg" alt="" /></p>

<h2 id="slides">Slides</h2>

<iframe src="https://docs.google.com/gview?url=https://raw.githubusercontent.com/josecastillolema/talks/main/2025-rh-summit/horizon.pdf&amp;embedded=true" style="width:100%; height: unset; aspect-ratio: 1/1;" frameborder="0"></iframe>

<iframe src="https://docs.google.com/gview?url=https://raw.githubusercontent.com/josecastillolema/talks/main/2025-rh-summit/shift-left.pdf&amp;embedded=true" style="width:100%; height: unset; aspect-ratio: 1/1;" frameborder="0"></iframe>]]></content><author><name>Jose Castillo Lema</name></author><category term="ansible" /><category term="en" /><category term="events" /><category term="openshift" /><category term="redhat" /><category term="research" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Code the Dream Skill-IT workshops</title><link href="https://josecastillolema.github.io/codethedream25/" rel="alternate" type="text/html" title="Code the Dream Skill-IT workshops" /><published>2025-04-25T00:00:00-05:00</published><updated>2025-04-05T00:00:00-05:00</updated><id>https://josecastillolema.github.io/codethedream25</id><content type="html" xml:base="https://josecastillolema.github.io/codethedream25/"><![CDATA[<p><a href="https://codethedream.org/">Code the Dream</a> thanks Jos√© Castillo Lema of Red Hat for being our featured employer speaker for this week‚Äôs Skill-IT üç≥!</p>

<p>Last month, Jos√© helped our students and apprentices through an intro to Docker, an open-source tool for building and managing containerized applications. Today, Jos√© followed up by guiding participants through hands-on practice with Docker. We‚Äôre grateful to Jos√© and Red Hat for being valuable partners in our work!</p>

<p>Skill-IT üç≥is a weekly lunch-and-learn workshop for Code the Dream students and apprentices to explore career topics, programs, and organizations. Our goal is to help participants make informed decisions and navigate the tech industry as they launch their careers.</p>

<p>Interested in being a featured employer speaker for a future Skill-IT üç≥? Contact our Director of Employer Partnerships, <a href="https://www.linkedin.com/in/rosalyn-hundley/">Rosalyn H. Barnett</a>, at <a href="mailto:rosalyn@codethedream.org">rosalyn@codethedream.org</a> to learn more and get scheduled!</p>

<p><img src="/assets/images/posts/2025-04-25-codethedream25.jpg" alt="" /></p>]]></content><author><name>Jose Castillo Lema</name></author><category term="classes" /><category term="en" /><category term="openshift" /><category term="redhat" /><summary type="html"><![CDATA[Code the Dream thanks Jos√© Castillo Lema of Red Hat for being our featured employer speaker for this week‚Äôs Skill-IT üç≥!]]></summary></entry><entry><title type="html">Introduction to Backstage - Developer Portals Made Easy (LFS142)</title><link href="https://josecastillolema.github.io/lf-backstage/" rel="alternate" type="text/html" title="Introduction to Backstage - Developer Portals Made Easy (LFS142)" /><published>2025-01-05T00:00:00-06:00</published><updated>2025-01-05T00:00:00-06:00</updated><id>https://josecastillolema.github.io/lf-backstage</id><content type="html" xml:base="https://josecastillolema.github.io/lf-backstage/"><![CDATA[<p><a href="https://training.linuxfoundation.org/"><img src="/assets/images/posts/2021-09-03-lf-courses.png" alt="" /></a></p>

<p><a href="https://training.linuxfoundation.org/">Linux Foundation Training &amp; Certification</a> provides free online-learning courses on a range of open source topics from Linux to blockchain, networking to cloud, and everything in between, with the possibility of earning certificates and badges.</p>

<p>I would like to recommend the <a href="https://trainingportal.linuxfoundation.org/courses/introduction-to-backstage-developer-portals-made-easy-lfs142">Introduction to Backstage - Developer Portals Made Easy</a> course to learn how developer portals like <a href="https://backstage.io/">Backstage</a> can help teams reduce tech fragmentation, knowledge silos, and lack of ownership while promoting creativity and autonomy.</p>

<h1 id="lfs142">LFS142</h1>

<p>Earners of the <strong>LFS142: Introduction to Backstage - Developer Portals Made Easy</strong> badge have learned to use the Backstage framework to advocate for and implement developer portals that enhance productivity and creativity within organizations. They can explain Backstage‚Äôs architecture, features, and setup processes, tailor Backstage to meet specific organizational needs, and customize it with plugins. They know how to deploy a developer portal that fosters autonomy and reduces technical silos.</p>

<div data-iframe-width="500" data-iframe-height="270" data-share-badge-id="4ee91574-1fa0-4dbc-ba9f-4c86b32eee83" data-share-badge-host="https://www.credly.com"></div>
<script type="text/javascript" async="" src="//cdn.credly.com/assets/utilities/embed.js"></script>]]></content><author><name>Jose Castillo Lema</name></author><category term="cert" /><category term="en" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Getting Started with OpenTelemetry (LFS148)</title><link href="https://josecastillolema.github.io/lf-opentelemetry/" rel="alternate" type="text/html" title="Getting Started with OpenTelemetry (LFS148)" /><published>2025-01-04T00:00:00-06:00</published><updated>2025-01-04T00:00:00-06:00</updated><id>https://josecastillolema.github.io/lf-opentelemetry</id><content type="html" xml:base="https://josecastillolema.github.io/lf-opentelemetry/"><![CDATA[<p><a href="https://training.linuxfoundation.org/"><img src="/assets/images/posts/2021-09-03-lf-courses.png" alt="" /></a></p>

<p><a href="https://training.linuxfoundation.org/">Linux Foundation Training &amp; Certification</a> provides free online-learning courses on a range of open source topics from Linux to blockchain, networking to cloud, and everything in between, with the possibility of earning certificates and badges.</p>

<p>I would like to recommend the <a href="https://trainingportal.linuxfoundation.org/courses/getting-started-with-opentelemetry-lfs148/">Getting Started with OpenTelemetry</a> course to learn how to use <a href="https://opentelemetry.io/">OpenTelemetry</a> to build and manage unified observability.</p>

<h1 id="lfs148">LFS148</h1>

<p>Earners of the <strong>LSF148: Getting Started with OpenTelemetry</strong> badge have hands-on experience implementing observability in software applications using OpenTelemetry. They can instrument Python and Java applications for traces, metrics, and logs, using both automatic and manual techniques. They understand telemetry signals, can use OpenTelemetry APIs and SDKs, and configure the OpenTelemetry Collector to export data to backends like Jaeger and Prometheus.</p>

<div data-iframe-width="450" data-iframe-height="270" data-share-badge-id="56d75314-b80c-4942-952a-8e0f23fe28ff" data-share-badge-host="https://www.credly.com"></div>
<script type="text/javascript" async="" src="//cdn.credly.com/assets/utilities/embed.js"></script>]]></content><author><name>Jose Castillo Lema</name></author><category term="cert" /><category term="en" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Playing with Podman crun backends: Wasm(Edge) and libkrun</title><link href="https://josecastillolema.github.io/podman-wasm-libkrun/" rel="alternate" type="text/html" title="Playing with Podman crun backends: Wasm(Edge) and libkrun" /><published>2025-01-02T00:00:00-06:00</published><updated>2025-01-02T00:00:00-06:00</updated><id>https://josecastillolema.github.io/podman-wasm-libkrun</id><content type="html" xml:base="https://josecastillolema.github.io/podman-wasm-libkrun/"><![CDATA[<p>Thanks to <a href="https://github.com/containers/crun">crun</a> we can run <a href="#wasm">WebAssembly (Wasm)</a> and <a href="#libkrun">libkrun</a> workloads in directly in Podman.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ podman info | grep crun -A 2
    name: crun
    package: crun-1.19.1-1.fc41.x86_64
    path: /usr/bin/crun
    version: |-
      crun version 1.19.1
      commit: 3e32a70c93f5aa5fea69b50256cca7fd4aa23c80
      rundir: /run/user/1000/crun
      spec: 1.0.0
      +SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +CRIU +LIBKRUN +WASM:wasmedge +YAJL
</code></pre></div></div>

<h2 id="wasm">Wasm</h2>

<p>WebAssembly (abbreviated Wasm) is a portable binary instruction format. It has gained popularity for its portability as a compilation target that enables deployment on the web for both client and server applications.</p>

<p>We can leverage the portability of Wasm to run Wasm workloads alongside Linux containers by combining crun and Podman. crun supports running Wasm workload by using <a href="https://wasmedge.org/">WasmEdge</a>, <a href="https://wasmtime.dev/">Wasmtime</a> or <a href="https://wasmer.io/">Wasmer</a> runtimes. WasmEdge is a lightweight, high-performance, and extensible WebAssembly runtime for cloud-native and edge applications.</p>

<p>To enable Wasm(Edge) applications through Podman in Fedora we need to:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rpm-ostree install wasmedge crun-wasm
</code></pre></div></div>

<p>To run Wasm applications though Podman:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ podman --runtime /usr/bin/crun-wasm run -dp 8080:8080 --platform=wasi/wasm -t --rm server-with-wasm
</code></pre></div></div>

<h2 id="libkrun">libkrun</h2>

<p><a href="https://github.com/containers/libkrun">libkrun</a> is a dynamic library that allows programs to easily acquire the ability to run processes in a partially isolated environment using KVM Virtualization on Linux and HVF on macOS/ARM64.</p>

<p>It integrates a VMM (Virtual Machine Monitor, the userspace side of an Hypervisor) with the minimum amount of emulated devices required to its purpose, abstracting most of the complexity that comes from Virtual Machine management, offering users a simple C API.</p>

<p><img src="/assets/images/posts/2025-01-02-podman-wasm-libkrun/1.webp" alt="" /></p>

<p>libkrun enables <a href="https://virtee.io/the-case-for-confidential-workloads/">Confidential Workloads (CW)</a>, autonomous, mission specific workloads that run inside a dedicated Virtualization-based TEE. They may make use of a minimal kernel, or have one statically-linked to it (unikernel case), but they shouldn‚Äôt depend on any other binary components.</p>

<p>This model is useful to quickly run and deploy small container-based applications, typically with a single container. The driving factor for confidential workloads is quick startup time and reduced resource usage for higher density.</p>

<p>To leverage libkrun through Podman in Fedora we need to:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rpm-ostree install libkrun
</code></pre></div></div>

<p>To use the libkrun backend though Podman:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ podman run --annotation=run.oci.handler=krun -dp 8080:8080 -t --rm server-without-wasm
</code></pre></div></div>

<h2 id="setup">Setup</h2>

<p>For the comparison, we have used a <a href="https://github.com/josecastillolema/wasmedge-server">Simple Rust HTTP server</a> from the <a href="https://github.com/second-state/wasmedge-rustsdk-examples">WasmEdge Rust SDK examples</a> modified to run with and without WasmEdge, running locally on my laptop:</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">net</span><span class="p">::</span><span class="n">SocketAddr</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">hyper</span><span class="p">::</span><span class="nn">server</span><span class="p">::</span><span class="nn">conn</span><span class="p">::</span><span class="n">Http</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">hyper</span><span class="p">::</span><span class="nn">service</span><span class="p">::</span><span class="n">service_fn</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">hyper</span><span class="p">::{</span><span class="n">Body</span><span class="p">,</span> <span class="n">Method</span><span class="p">,</span> <span class="n">Request</span><span class="p">,</span> <span class="n">Response</span><span class="p">,</span> <span class="n">StatusCode</span><span class="p">};</span>
<span class="k">use</span> <span class="nn">tokio</span><span class="p">::</span><span class="nn">net</span><span class="p">::</span><span class="n">TcpListener</span><span class="p">;</span>

<span class="cd">/// This is our service handler. It receives a Request, routes on its</span>
<span class="cd">/// path, and returns a Future of a Response.</span>
<span class="k">async</span> <span class="k">fn</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">req</span><span class="p">:</span> <span class="n">Request</span><span class="o">&lt;</span><span class="n">Body</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&lt;</span><span class="n">Body</span><span class="o">&gt;</span><span class="p">,</span> <span class="nn">hyper</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">match</span> <span class="p">(</span><span class="n">req</span><span class="nf">.method</span><span class="p">(),</span> <span class="n">req</span><span class="nf">.uri</span><span class="p">()</span><span class="nf">.path</span><span class="p">())</span> <span class="p">{</span>
        <span class="c1">// Serve some instructions at /</span>
        <span class="p">(</span><span class="o">&amp;</span><span class="nn">Method</span><span class="p">::</span><span class="n">GET</span><span class="p">,</span> <span class="s">"/"</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nf">Ok</span><span class="p">(</span><span class="nn">Response</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="nn">Body</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span>
            <span class="s">"Try POSTing data to /echo such as: `curl localhost:8080/echo -XPOST -d 'hello world'`"</span><span class="p">,</span>
        <span class="p">))),</span>

        <span class="c1">// Simply echo the body back to the client.</span>
        <span class="p">(</span><span class="o">&amp;</span><span class="nn">Method</span><span class="p">::</span><span class="n">POST</span><span class="p">,</span> <span class="s">"/echo"</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nf">Ok</span><span class="p">(</span><span class="nn">Response</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">req</span><span class="nf">.into_body</span><span class="p">())),</span>

        <span class="p">(</span><span class="o">&amp;</span><span class="nn">Method</span><span class="p">::</span><span class="n">POST</span><span class="p">,</span> <span class="s">"/echo/reversed"</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">whole_body</span> <span class="o">=</span> <span class="nn">hyper</span><span class="p">::</span><span class="nn">body</span><span class="p">::</span><span class="nf">to_bytes</span><span class="p">(</span><span class="n">req</span><span class="nf">.into_body</span><span class="p">())</span><span class="k">.await</span><span class="o">?</span><span class="p">;</span>

            <span class="k">let</span> <span class="n">reversed_body</span> <span class="o">=</span> <span class="n">whole_body</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">()</span><span class="py">.collect</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">u8</span><span class="o">&gt;&gt;</span><span class="p">();</span>
            <span class="nf">Ok</span><span class="p">(</span><span class="nn">Response</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="nn">Body</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="n">reversed_body</span><span class="p">)))</span>
        <span class="p">}</span>

        <span class="c1">// Return the 404 Not Found for other routes.</span>
        <span class="n">_</span> <span class="k">=&gt;</span> <span class="p">{</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">not_found</span> <span class="o">=</span> <span class="nn">Response</span><span class="p">::</span><span class="nf">default</span><span class="p">();</span>
            <span class="o">*</span><span class="n">not_found</span><span class="nf">.status_mut</span><span class="p">()</span> <span class="o">=</span> <span class="nn">StatusCode</span><span class="p">::</span><span class="n">NOT_FOUND</span><span class="p">;</span>
            <span class="nf">Ok</span><span class="p">(</span><span class="n">not_found</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nd">#[tokio::main(flavor</span> <span class="nd">=</span> <span class="s">"current_thread"</span><span class="nd">)]</span>
<span class="k">async</span> <span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="nb">Box</span><span class="o">&lt;</span><span class="k">dyn</span> <span class="nn">std</span><span class="p">::</span><span class="nn">error</span><span class="p">::</span><span class="n">Error</span> <span class="o">+</span> <span class="nb">Send</span> <span class="o">+</span> <span class="nb">Sync</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">addr</span> <span class="o">=</span> <span class="nn">SocketAddr</span><span class="p">::</span><span class="nf">from</span><span class="p">(([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="mi">8080</span><span class="p">));</span>

    <span class="k">let</span> <span class="n">listener</span> <span class="o">=</span> <span class="nn">TcpListener</span><span class="p">::</span><span class="nf">bind</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span><span class="k">.await</span><span class="o">?</span><span class="p">;</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Listening on http://{}"</span><span class="p">,</span> <span class="n">addr</span><span class="p">);</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="k">let</span> <span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">listener</span><span class="nf">.accept</span><span class="p">()</span><span class="k">.await</span><span class="o">?</span><span class="p">;</span>

        <span class="nn">tokio</span><span class="p">::</span><span class="nn">task</span><span class="p">::</span><span class="nf">spawn</span><span class="p">(</span><span class="k">async</span> <span class="k">move</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Err</span><span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="nn">Http</span><span class="p">::</span><span class="nf">new</span><span class="p">()</span><span class="nf">.serve_connection</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="nf">service_fn</span><span class="p">(</span><span class="n">handle_request</span><span class="p">))</span><span class="k">.await</span> <span class="p">{</span>
                <span class="nd">println!</span><span class="p">(</span><span class="s">"Error serving connection: {:?}"</span><span class="p">,</span> <span class="n">err</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Dependencies with Wasm support look like:</p>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[dependencies]</span>
<span class="nn">hyper_wasi</span> <span class="o">=</span> <span class="p">{</span> <span class="py">version</span> <span class="p">=</span> <span class="s">"0.15"</span><span class="p">,</span> <span class="py">features</span> <span class="p">=</span> <span class="nn">["full"]</span><span class="p">}</span>
<span class="nn">tokio_wasi</span> <span class="o">=</span> <span class="p">{</span> <span class="py">version</span> <span class="p">=</span> <span class="s">"1"</span><span class="p">,</span> <span class="py">features</span> <span class="p">=</span> <span class="p">[</span><span class="s">"rt"</span><span class="p">,</span> <span class="s">"macros"</span><span class="p">,</span> <span class="s">"net"</span><span class="p">,</span> <span class="s">"time"</span><span class="p">,</span> <span class="s">"io-util"</span><span class="p">]}</span>
</code></pre></div></div>

<p>And without:</p>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[dependencies]</span>
<span class="nn">hyper</span> <span class="o">=</span> <span class="p">{</span> <span class="py">version</span> <span class="p">=</span> <span class="s">"0.14"</span><span class="p">,</span> <span class="py">features</span> <span class="p">=</span> <span class="nn">["full"]</span><span class="p">}</span>
<span class="nn">tokio</span> <span class="o">=</span> <span class="p">{</span> <span class="py">version</span> <span class="p">=</span> <span class="s">"1"</span><span class="p">,</span> <span class="py">features</span> <span class="p">=</span> <span class="p">[</span><span class="s">"rt"</span><span class="p">,</span> <span class="s">"macros"</span><span class="p">,</span> <span class="s">"net"</span><span class="p">,</span> <span class="s">"time"</span><span class="p">,</span> <span class="s">"io-util"</span><span class="p">]}</span>
</code></pre></div></div>

<p>The <a href="https://github.com/josecastillolema/wasmedge-server">repository</a> contains instructions to build, run, test and create container images for both scenarios.</p>

<h2 id="results">Results</h2>

<p>Let‚Äôs compare ‚Äúnormal‚Äù native containers, Wasm(Edge) and libkrun for several scenarios.</p>

<h3 id="with-podman">With podman</h3>

<h4 id="image-size">Image size</h4>

<p>Wasm image is 77% smaller than the usual container ones. To keep the without-wasm image minimal we have leveraged <a href="https://musl.libc.org/">musl</a>, a minimal C library that is often used on embedded systems and other environments where a full-featured library like glibc is not available.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoieHljaGFydC1iZXRhXG50aXRsZSBcIkltYWdlIHNpemVcIlxueC1heGlzIFtwb2RtYW4sIHdhc21lZGdlLCBsaWJrcnVuXVxueS1heGlzIFwiU2l6ZSAoTUJzKVwiIDAgLS0-IDVcbmJhciBbNC45MywgMS4xNywgNC45M10iLCJtZXJtYWlkIjpudWxsfQ" /></p>

<h4 id="resource-usage">Resource usage</h4>

<h5 id="idle">Idle</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ podman stats
ID            NAME        CPU %       MEM USAGE / LIMIT  MEM %       NET IO      BLOCK IO      PIDS        CPU TIME    AVG CPU %
241deb12adf5  podman      0.01%       208.9kB / 67.1GB   0.00%       0B / 726B   0B / 0B       1           3.915ms     0.01%
a568ddf0f97b  wasmedge    0.04%       26.35MB / 67.1GB   0.04%       0B / 796B   0B / 0B       1           30.242ms    0.04%
f906858667d5  libkrun     3.15%       101.5MB / 67.1GB   0.15%       0B / 656B   0B / 4.096kB  17          901.204ms   3.15%
</code></pre></div></div>

<h6 id="cpu">CPU</h6>

<p>libkrun presents a slightly higher CPU usage (and much more PIDs in use).</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoieHljaGFydC1iZXRhXG50aXRsZSBcIkNQVSB1c2FnZVwiXG54LWF4aXMgW3BvZG1hbiwgd2FzbWVkZ2UsIGxpYmtydW5dXG55LWF4aXMgXCJDUFUgKCUpXCIgMCAtLT4gNFxuYmFyIFswLjAxLCAwLjA0LCAzLjE1XSIsIm1lcm1haWQiOm51bGx9" /></p>

<h6 id="memory">Memory</h6>

<p>Native podman container memory consumption is less than a quarter MB. Wasmedge consumes over 25 MBs (x126) and libkrun over 100 MBs (x487).</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoieHljaGFydC1iZXRhXG50aXRsZSBcIk1lbW9yeSB1c2FnZVwiXG54LWF4aXMgW3BvZG1hbiwgd2FzbWVkZ2UsIGxpYmtydW5dXG55LWF4aXMgXCJNZW1vcnkgKE1CcylcIiAwIC0tPiAxMjBcbmJhciBbMC4yLCAyNi4zNSwgMTAxLjRdIiwibWVybWFpZCI6bnVsbH0" /></p>

<h5 id="under-load">Under load</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ podman stats
ID            NAME        CPU %       MEM USAGE / LIMIT  MEM %       NET IO        BLOCK IO      PIDS        CPU TIME     AVG CPU %
241deb12adf5  podman      57.34%      417.8kB / 67.1GB   0.00%       0B / 1.216kB  0B / 0B       1           13.879976s   0.13%
110f88177027  wasmedge    98.57%      26.6MB  / 67.1GB   0.04%       0B / 656B     0B / 0B       1           6.130282s    27.35%
f906858667d5  libkrun     255.08%     109.1MB / 67.1GB   0.16%       0B / 1.146kB  0B / 4.096kB  17          1m4.485238s  0.66%
</code></pre></div></div>

<h6 id="cpu-1">CPU</h6>

<p>Native podman containers consume approximately half core. WasmEdge container takes almost a full core. Libkrun consumes over 2.5 cores.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoieHljaGFydC1iZXRhXG50aXRsZSBcIkNQVSB1c2FnZVwiXG54LWF4aXMgW3BvZG1hbiwgd2FzbWVkZ2UsIGxpYmtydW5dXG55LWF4aXMgXCJDUFUgKCUpXCIgMCAtLT4gMzAwXG5iYXIgWzU3LCA5OCwgMjU1XSIsIm1lcm1haWQiOm51bGx9" /></p>

<h6 id="memory-1">Memory</h6>

<p>There are no major variations from the memory perspective compared to the idle scenario.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoieHljaGFydC1iZXRhXG50aXRsZSBcIk1lbW9yeSB1c2FnZVwiXG54LWF4aXMgW3BvZG1hbiwgd2FzbWVkZ2UsIGxpYmtydW5dXG55LWF4aXMgXCJNZW1vcnkgKE1CcylcIiAwIC0tPiAxMjBcbmJhciBbMC40LCAyNi42LCAxMDkuMV0iLCJtZXJtYWlkIjpudWxsfQ" /></p>

<h4 id="networking-performance">Networking performance</h4>

<p>To compare networking performance among the three solutions we have used <a href="https://github.com/fcsonline/drill">Drill</a>, a HTTP load testing application written in Rust. The <a href="https://github.com/josecastillolema/wasmedge-server/blob/main/drill-benchmark.yml">benchmark file</a> can be found in the repository and generates 85 byte HTTP GETs and POSTs calls:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ drill --benchmark drill-benchmark.yml --stats
...
Time taken for tests      44.0 seconds
Total requests            2000000
Successful requests       2000000
Failed requests           0
Requests per second       45475.02 [#/sec]
Median time per request   0ms
Average time per request  0ms
Sample standard deviation 0ms
99.0'th percentile        0ms
99.5'th percentile        0ms
99.9'th percentile        1ms
</code></pre></div></div>

<h5 id="requests-per-second">Requests per second</h5>

<p>The WasmEdge podman container becomes unresponsive after some time. Even so, it only achieves a 4% rate compared with the native podman container solution.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoieHljaGFydC1iZXRhXG50aXRsZSBcIlJlcXVlc3RzIHBlciBzZWNvbmRcIlxueC1heGlzIFtwb2RtYW4sIHdhc21lZGdlLCBsaWJrcnVuXVxueS1heGlzIFwiUlBTICgjL3NlYylcIiAwIC0tPiA4MDAwMFxuYmFyIFs2NTQ0OSwgMjY2MywgNDU0NzVdIiwibWVybWFpZCI6bnVsbH0" /></p>

<h5 id="average-time-per-request">Average time per request</h5>

<p>The WasmEdge podman container presents the worst latency even delivering only 4% of the request compared with the native container solution.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoieHljaGFydC1iZXRhXG50aXRsZSBcIkF2ZXJhZ2UgdGltZSBwZXIgcmVxdWVzdFwiXG54LWF4aXMgW3BvZG1hbiwgd2FzbWVkZ2UsIGxpYmtydW5dXG55LWF4aXMgXCJBdmVyYWdlIHRpbWUgKG1zKVwiIDAgLS0-IDVcbmJhciBbMCwgNCwgMF0iLCJtZXJtYWlkIjpudWxsfQ" /></p>

<h4 id="summary">Summary</h4>

<p>The <strong>podman</strong> native container solution presented the best overall results as expected.</p>

<p><strong>libkrun</strong> has great network performance, and incurs in some resource overhead as expected of an hybrid virtualization solution. For networking, it implements <code class="language-plaintext highlighter-rouge">virtio-vsock+TSI</code>, an experimental mechanism that provides inbound and outbound networking capabilities to the guest, with zero-configuration and minimal footprint, by transparently replacing user-space <code class="language-plaintext highlighter-rouge">AF_INET</code> sockets with <code class="language-plaintext highlighter-rouge">AF_TSI</code>, implementing both <code class="language-plaintext highlighter-rouge">AF_INET</code> and <code class="language-plaintext highlighter-rouge">AF_VSOCK</code> sockets. TSI has the additional advantage that, for the host side, all connections appear to come and go to the process acting as a VMM, which makes it very container-friendly in a way that even side-cars (such as Istio) work out-of-the-box.</p>

<p>The <strong>WasmEdge</strong> solution presents a very acceptable resource consumption (and the best image size), however the networking performance is only a 4% compared to native podman and the application becomes unresponsive under heavy load.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoicXVhZHJhbnRDaGFydFxudGl0bGUgU3VtbWFyeVxucXVhZHJhbnQtMSBSUFNcbnF1YWRyYW50LTIgTGF0ZW5jeVxucXVhZHJhbnQtMyBDUFVcbnF1YWRyYW50LTQgTWVtb3J5XG4lJSBycHNcbnBvZG1hbjogWzAuOTIsIDAuOTJdXG53YXNtZWRnZTogWzAuNTcsIDAuNTM2XVxubGlia3J1bjogWzAuOCwgMC44XVxuJSUgbGF0ZW5jeVxucG9kbWFuOiBbMC40LCAwLjldXG53YXNtZWRnZTogWzAuMDcsIDAuNTM2XVxubGlia3J1bjogWzAuMzUsIDAuODVdXG4lJSBDUFVcbnBvZG1hbjogWzAuNDIsIDAuNDJdXG53YXNtZWRnZTogWzAuMzUsIDAuMzVdXG5saWJrcnVuOiBbMC4xLCAwLjFdXG4lJSBtZW1vcnlcbnBvZG1hbjogWzAuOTIsIDAuNDJdXG53YXNtZWRnZTogWzAuOCwgMC4zXVxubGlia3J1bjogWzAuNTUsIDAuMDVdIiwibWVybWFpZCI6bnVsbH0" /></p>

<h3 id="without-podman">Without podman</h3>

<p>Wasm is often described as having ‚Äúnear-native performance‚Äù. Let‚Äôs remove podman from the equation to see if we observe a better networking performance.</p>

<h4 id="wasmedge">Wasmedge</h4>

<p>To build locally the WasmEdge enabled served:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rustup target add wasm32-wasi
$ cargo build --target wasm32-wasi --release
</code></pre></div></div>

<p>Run the Wasm bytecode file in WasmEdge CLI.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wasmedge target/wasm32-wasi/release/server-with-wasm.wasm
Listening on http://0.0.0.0:8080
</code></pre></div></div>

<p>And run the test:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ drill --benchmark drill-benchmark.yml --stats
...
Time taken for tests      91.4 seconds
Total requests            200000
Successful requests       200000
Failed requests           0
Requests per second       2188.77 [#/sec]
Median time per request   5ms
Average time per request  5ms
Sample standard deviation 2ms
99.0'th percentile        9ms
99.5'th percentile        10ms
99.9'th percentile        10ms
</code></pre></div></div>

<p>While the server did not become unresponsive and sustained a longer test, the RPS result is similar to the podman one.</p>

<h4 id="native">Native</h4>

<p>Compile the Rust server source code:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rustup target add x86_64-unknown-linux-musl
$ cargo build --target x86_64-unknown-linux-musl --release
</code></pre></div></div>

<p>Run the server:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./target/x86_64-unknown-linux-musl/release/server-without-wasm
Listening on http://0.0.0.0:8080
</code></pre></div></div>

<p>And run the test:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ drill --benchmark drill-benchmark.yml --stats
...
Time taken for tests      23.0 seconds
Total requests            2000000
Successful requests       2000000
Failed requests           0
Requests per second       86970.22 [#/sec]
Median time per request   0ms
Average time per request  0ms
Sample standard deviation 0ms
99.0'th percentile        0ms
99.5'th percentile        0ms
99.9'th percentile        0ms
</code></pre></div></div>

<p>We observe some podman overhead (approximately 30%).</p>

<h4 id="summary-1">Summary</h4>

<p>Podman is not responsible for the poor networking performance of the Wasmedge enabled server.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoieHljaGFydC1iZXRhXG50aXRsZSBcIlJlcXVlc3RzIHBlciBzZWNvbmRcIlxueC1heGlzIFtwb2RtYW4sIG5hdGl2ZSwgcG9kbWFuLXdhc20sIHdhc21dXG55LWF4aXMgXCJSUFMgKCMvc2VjKVwiIDAgLS0-IDkwMDAwXG5iYXIgWzY1NDQ5LCA4Njk3MCwgMjY2MywgMjE4OF0iLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p>Looking at this nice article about the <a href="https://00f.net/2023/01/04/webassembly-benchmark-2023/">Performance of WebAssembly runtimes in 2023</a> it does not look that Wasmedge is a slow runtime compared to the median performance. If you‚Äôre looking for the best performer, looks like <a href="https://github.com/bytecodealliance/wasm-micro-runtime">iwasm</a> is currently the one to choose, but overall Wasmtime, WasmEdge and Wasmer (supported by crun) are in the same ballpark and have a decent performance.</p>

<p>A quick look at the <code class="language-plaintext highlighter-rouge">wasmedge</code> CLI options shows an option that could be of interest for this particular use case, however no significant performance improvement was observed with it:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wasmedge -h
...
--enable-threads
                Enable Threads proposal
...
</code></pre></div></div>

<h4 id="profiling">Profiling</h4>

<p>At this point, the performance hit looks to be due to 1) the Wasm runtime or 2) the Wasm ported libraries (<code class="language-plaintext highlighter-rouge">hyper_wasi</code> and <code class="language-plaintext highlighter-rouge">tokio_wasi</code>). Let‚Äôs take a closer look using flame graphs.</p>

<p>To profile a release build effectively we need to enable source line debug info. To do this, add the following lines to the <code class="language-plaintext highlighter-rouge">Cargo.toml</code> file:</p>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[profile.release]</span>
<span class="py">debug</span> <span class="p">=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>Build and run again the server, clone the <a href="https://github.com/brendangregg/FlameGraph">FlameGraph repository</a> and for convenience put it on your path:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ perf record -F 99 -p [pid of server-with-wasm] --call-graph dwarf -- curl localhost:8080
$ perf script &gt; server-with-wasm.perf
$ stackcollapse-perf.pl server-with-wasm.perf &gt; server-with-wasm.folded
$ flamegraph.pl server-with-wasm.folded &gt; server-with-wasm.sv
</code></pre></div></div>

<p>This is the resulting flame graph. It looks like most of the time is spent on <code class="language-plaintext highlighter-rouge">libwasmedge.so</code> calls:
<img src="/assets/images/posts/2025-01-02-podman-wasm-libkrun/2.svg" alt="" /></p>]]></content><author><name>Jose Castillo Lema</name></author><category term="dev" /><category term="en" /><category term="redhat" /><summary type="html"><![CDATA[Thanks to crun we can run WebAssembly (Wasm) and libkrun workloads in directly in Podman. $ podman info | grep crun -A 2 name: crun package: crun-1.19.1-1.fc41.x86_64 path: /usr/bin/crun version: |- crun version 1.19.1 commit: 3e32a70c93f5aa5fea69b50256cca7fd4aa23c80 rundir: /run/user/1000/crun spec: 1.0.0 +SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +CRIU +LIBKRUN +WASM:wasmedge +YAJL]]></summary></entry><entry><title type="html">Happy new year!</title><link href="https://josecastillolema.github.io/newyear25/" rel="alternate" type="text/html" title="Happy new year!" /><published>2025-01-01T00:00:00-06:00</published><updated>2025-01-01T00:00:00-06:00</updated><id>https://josecastillolema.github.io/newyear25</id><content type="html" xml:base="https://josecastillolema.github.io/newyear25/"><![CDATA[<p><img src="/assets/images/posts/2025-01-01-newyear25.png" alt="" /></p>]]></content><author><name>Jose Castillo Lema</name></author><category term="en" /><category term="es" /><category term="redhat" /><category term="pt" /><summary type="html"><![CDATA[]]></summary></entry></feed>